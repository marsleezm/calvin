// Author: Alexander Thomson (thomson@cs.yale.edu)
// Author: Kun Ren (kun.ren@yale.edu)
//
// Protocol buffer used for all network messages in the system.

message MessageProto {
  // Node to which this message should be sent.
  required int32 destination_node = 1;

  // Channel to which this message shall be delivered when it arrives at node
  // 'destination_node'.
  required string destination_channel = 2;

  // Node from which the message originated.
  optional int32 source_node = 3;

  // Channel from which the message originated.
  optional int32 source_channel = 4;

  // Every type of network message should get an entry here.
  enum MessageType {
    EMPTY = 0;
    TXN_PROTO = 1;
    TXN_BATCH = 2;
    READ_RESULT = 3;
    LINK_CHANNEL = 4;    // [Connection implementation specific.]
    UNLINK_CHANNEL = 5;  // [Connection implementation specific.]
    TXN_PTR = 6;
    MESSAGE_PTR = 7;
    READ_CONFIRM = 8;
    MULTI_READ_CONFIRM = 9;
  };
  required MessageType type = 9;

  // Actual data for the message being carried, to be deserialized into a
  // protocol message object of type depending on 'type'. In TXN_PROTO and
  // TXN_BATCH messages, 'data' contains are one and any number of TxnProtos,
  // respectively.
  repeated bytes data = 11;
  
  // Carries the number of times aborts for a transaction, when the read result
  // sent by it is stable already, i.e. all transactions before it has committed.
  optional int32 global_aborted = 13;
  optional int32 local_aborted = 14;
  optional int32 sender_id = 15;
  optional int64 tx_id = 17;
  optional int64 tx_local = 18;
  // local txs aborted due to me
  repeated int64 ca_tx = 19;
  repeated int32 ca_num = 20;

  // For TXN_BATCH messages, 'batch_number' identifies the epoch of the txn
  // batch being sent.
  optional int64 batch_number = 21;

  // For READ_RESULT messages, 'keys(i)' and 'values(i)' store the key and
  // result of a read, respectively.
  repeated bytes keys = 31;
  repeated bytes values = 32;
  
   // For (UN)LINK_CHANNEL messages, specifies the channel to be (un)linked
  // to the requesting Connection object.
optional string channel_request = 40;
}

